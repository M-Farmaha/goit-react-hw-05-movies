{"version":3,"file":"static/js/829.8bf16a67.chunk.js","mappings":"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","sources":["components/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","fetchRequest.js"],"sourcesContent":["import { castRequest } from 'fetchRequest';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport NoCastFaceImageW92 from '../images/no-cast-face-w92.jpg';\nimport {\n  AddSection,\n  CastList,\n  CastItem,\n  CastImageWrap,\n} from './styled-components';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    castRequest(movieId)\n      .then(response => {\n        setCast(response.cast);\n      })\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  return cast.length !== 0 ? (\n    <AddSection>\n      <CastList>\n        {cast.map(el => (\n          <CastItem key={el.id}>\n            <CastImageWrap>\n              <img\n                src={\n                  el.profile_path\n                    ? `https://image.tmdb.org/t/p/w92/${el.profile_path}`\n                    : NoCastFaceImageW92\n                }\n                alt={el.name}\n              />\n            </CastImageWrap>\n            <p>{el.name}</p>\n            <p>{el.character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n    </AddSection>\n  ) : (\n    <h3>Sorry! We don't have cast info about this movie :(</h3>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'ef24936cd708c9aa0029dc0cfa81df25';\n\nexport const trendingMoviesRequest = async () => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${KEY}`;\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData);\n  }\n};\n\nexport const searchMoviesRequest = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${query}&page=1`;\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData);\n  }\n};\n\nexport const movieDetailRequest = async movieId => {\n  const url = `${BASE_URL}/movie/${movieId}?api_key=${KEY}&language=en-US`;\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData);\n  }\n};\n\nexport const castRequest = async movieId => {\n  const url = `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}&language=en-US`;\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData);\n  }\n};\n\nexport const reviewsRequest = async movieId => {\n  const url = `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`;\n  const response = await fetch(url);\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData);\n  }\n};\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","castRequest","then","response","catch","err","console","log","length","map","el","src","profile_path","NoCastFaceImageW92","alt","name","character","id","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","undefined","BASE_URL","KEY","trendingMoviesRequest","url","fetch","ok","json","data","errorData","Error","searchMoviesRequest","query","movieDetailRequest","reviewsRequest"],"sourceRoot":""}